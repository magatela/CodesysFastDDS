// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file dataExchangeDDS.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "dataExchangeDDS.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

dataExchangeDDS::dataExchangeDDS()
{
    // m_endLoopSignal com.eprosima.idl.parser.typecode.PrimitiveTypeCode@23fe1d71
    m_endLoopSignal = 0;
    // m_synchronizer com.eprosima.idl.parser.typecode.PrimitiveTypeCode@28ac3dc3
    m_synchronizer = 0;
    // m_diValue2 com.eprosima.idl.parser.typecode.PrimitiveTypeCode@32eebfca
    m_diValue2 = 0;
    // m_diValue3 com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4e718207
    m_diValue3 = 0;
    // m_diValue4 com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1d371b2d
    m_diValue4 = 0;

}

dataExchangeDDS::~dataExchangeDDS()
{





}

dataExchangeDDS::dataExchangeDDS(
        const dataExchangeDDS& x)
{
    m_endLoopSignal = x.m_endLoopSignal;
    m_synchronizer = x.m_synchronizer;
    m_diValue2 = x.m_diValue2;
    m_diValue3 = x.m_diValue3;
    m_diValue4 = x.m_diValue4;
}

dataExchangeDDS::dataExchangeDDS(
        dataExchangeDDS&& x)
{
    m_endLoopSignal = x.m_endLoopSignal;
    m_synchronizer = x.m_synchronizer;
    m_diValue2 = x.m_diValue2;
    m_diValue3 = x.m_diValue3;
    m_diValue4 = x.m_diValue4;
}

dataExchangeDDS& dataExchangeDDS::operator =(
        const dataExchangeDDS& x)
{

    m_endLoopSignal = x.m_endLoopSignal;
    m_synchronizer = x.m_synchronizer;
    m_diValue2 = x.m_diValue2;
    m_diValue3 = x.m_diValue3;
    m_diValue4 = x.m_diValue4;

    return *this;
}

dataExchangeDDS& dataExchangeDDS::operator =(
        dataExchangeDDS&& x)
{

    m_endLoopSignal = x.m_endLoopSignal;
    m_synchronizer = x.m_synchronizer;
    m_diValue2 = x.m_diValue2;
    m_diValue3 = x.m_diValue3;
    m_diValue4 = x.m_diValue4;

    return *this;
}

bool dataExchangeDDS::operator ==(
        const dataExchangeDDS& x)
{

    return (m_endLoopSignal == x.m_endLoopSignal && m_synchronizer == x.m_synchronizer && m_diValue2 == x.m_diValue2 && m_diValue3 == x.m_diValue3 && m_diValue4 == x.m_diValue4);
}

bool dataExchangeDDS::operator !=(
        const dataExchangeDDS& x)
{
    return !(*this == x);
}

size_t dataExchangeDDS::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t dataExchangeDDS::getCdrSerializedSize(
        const dataExchangeDDS& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void dataExchangeDDS::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_endLoopSignal;
    scdr << m_synchronizer;
    scdr << m_diValue2;
    scdr << m_diValue3;
    scdr << m_diValue4;

}

void dataExchangeDDS::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_endLoopSignal;
    dcdr >> m_synchronizer;
    dcdr >> m_diValue2;
    dcdr >> m_diValue3;
    dcdr >> m_diValue4;
}

/*!
 * @brief This function sets a value in member endLoopSignal
 * @param _endLoopSignal New value for member endLoopSignal
 */
void dataExchangeDDS::endLoopSignal(
        int32_t _endLoopSignal)
{
    m_endLoopSignal = _endLoopSignal;
}

/*!
 * @brief This function returns the value of member endLoopSignal
 * @return Value of member endLoopSignal
 */
int32_t dataExchangeDDS::endLoopSignal() const
{
    return m_endLoopSignal;
}

/*!
 * @brief This function returns a reference to member endLoopSignal
 * @return Reference to member endLoopSignal
 */
int32_t& dataExchangeDDS::endLoopSignal()
{
    return m_endLoopSignal;
}

/*!
 * @brief This function sets a value in member synchronizer
 * @param _synchronizer New value for member synchronizer
 */
void dataExchangeDDS::synchronizer(
        int32_t _synchronizer)
{
    m_synchronizer = _synchronizer;
}

/*!
 * @brief This function returns the value of member synchronizer
 * @return Value of member synchronizer
 */
int32_t dataExchangeDDS::synchronizer() const
{
    return m_synchronizer;
}

/*!
 * @brief This function returns a reference to member synchronizer
 * @return Reference to member synchronizer
 */
int32_t& dataExchangeDDS::synchronizer()
{
    return m_synchronizer;
}

/*!
 * @brief This function sets a value in member diValue2
 * @param _diValue2 New value for member diValue2
 */
void dataExchangeDDS::diValue2(
        int32_t _diValue2)
{
    m_diValue2 = _diValue2;
}

/*!
 * @brief This function returns the value of member diValue2
 * @return Value of member diValue2
 */
int32_t dataExchangeDDS::diValue2() const
{
    return m_diValue2;
}

/*!
 * @brief This function returns a reference to member diValue2
 * @return Reference to member diValue2
 */
int32_t& dataExchangeDDS::diValue2()
{
    return m_diValue2;
}

/*!
 * @brief This function sets a value in member diValue3
 * @param _diValue3 New value for member diValue3
 */
void dataExchangeDDS::diValue3(
        int32_t _diValue3)
{
    m_diValue3 = _diValue3;
}

/*!
 * @brief This function returns the value of member diValue3
 * @return Value of member diValue3
 */
int32_t dataExchangeDDS::diValue3() const
{
    return m_diValue3;
}

/*!
 * @brief This function returns a reference to member diValue3
 * @return Reference to member diValue3
 */
int32_t& dataExchangeDDS::diValue3()
{
    return m_diValue3;
}

/*!
 * @brief This function sets a value in member diValue4
 * @param _diValue4 New value for member diValue4
 */
void dataExchangeDDS::diValue4(
        int32_t _diValue4)
{
    m_diValue4 = _diValue4;
}

/*!
 * @brief This function returns the value of member diValue4
 * @return Value of member diValue4
 */
int32_t dataExchangeDDS::diValue4() const
{
    return m_diValue4;
}

/*!
 * @brief This function returns a reference to member diValue4
 * @return Reference to member diValue4
 */
int32_t& dataExchangeDDS::diValue4()
{
    return m_diValue4;
}


size_t dataExchangeDDS::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;








    return current_align;
}

bool dataExchangeDDS::isKeyDefined()
{
    return false;
}

void dataExchangeDDS::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
         
}
