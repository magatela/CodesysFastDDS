// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file dataExchangeDDS.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _DATAEXCHANGEDDS_H_
#define _DATAEXCHANGEDDS_H_


#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(dataExchangeDDS_SOURCE)
#define dataExchangeDDS_DllAPI __declspec( dllexport )
#else
#define dataExchangeDDS_DllAPI __declspec( dllimport )
#endif // dataExchangeDDS_SOURCE
#else
#define dataExchangeDDS_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define dataExchangeDDS_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


/*!
 * @brief This class represents the structure dataExchangeDDS defined by the user in the IDL file.
 * @ingroup DATAEXCHANGEDDS
 */
class dataExchangeDDS
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport dataExchangeDDS();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~dataExchangeDDS();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object dataExchangeDDS that will be copied.
     */
    eProsima_user_DllExport dataExchangeDDS(
            const dataExchangeDDS& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object dataExchangeDDS that will be copied.
     */
    eProsima_user_DllExport dataExchangeDDS(
            dataExchangeDDS&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object dataExchangeDDS that will be copied.
     */
    eProsima_user_DllExport dataExchangeDDS& operator =(
            const dataExchangeDDS& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object dataExchangeDDS that will be copied.
     */
    eProsima_user_DllExport dataExchangeDDS& operator =(
            dataExchangeDDS&& x);

    /*!
     * @brief Comparison operator.
     * @param x dataExchangeDDS object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const dataExchangeDDS& x);

    /*!
     * @brief Comparison operator.
     * @param x dataExchangeDDS object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const dataExchangeDDS& x);

    /*!
     * @brief This function sets a value in member endLoopSignal
     * @param _endLoopSignal New value for member endLoopSignal
     */
    eProsima_user_DllExport void endLoopSignal(
            int32_t _endLoopSignal);

    /*!
     * @brief This function returns the value of member endLoopSignal
     * @return Value of member endLoopSignal
     */
    eProsima_user_DllExport int32_t endLoopSignal() const;

    /*!
     * @brief This function returns a reference to member endLoopSignal
     * @return Reference to member endLoopSignal
     */
    eProsima_user_DllExport int32_t& endLoopSignal();

    /*!
     * @brief This function sets a value in member synchronizer
     * @param _synchronizer New value for member synchronizer
     */
    eProsima_user_DllExport void synchronizer(
            int32_t _synchronizer);

    /*!
     * @brief This function returns the value of member synchronizer
     * @return Value of member synchronizer
     */
    eProsima_user_DllExport int32_t synchronizer() const;

    /*!
     * @brief This function returns a reference to member synchronizer
     * @return Reference to member synchronizer
     */
    eProsima_user_DllExport int32_t& synchronizer();

    /*!
     * @brief This function sets a value in member diValue2
     * @param _diValue2 New value for member diValue2
     */
    eProsima_user_DllExport void diValue2(
            int32_t _diValue2);

    /*!
     * @brief This function returns the value of member diValue2
     * @return Value of member diValue2
     */
    eProsima_user_DllExport int32_t diValue2() const;

    /*!
     * @brief This function returns a reference to member diValue2
     * @return Reference to member diValue2
     */
    eProsima_user_DllExport int32_t& diValue2();

    /*!
     * @brief This function sets a value in member diValue3
     * @param _diValue3 New value for member diValue3
     */
    eProsima_user_DllExport void diValue3(
            int32_t _diValue3);

    /*!
     * @brief This function returns the value of member diValue3
     * @return Value of member diValue3
     */
    eProsima_user_DllExport int32_t diValue3() const;

    /*!
     * @brief This function returns a reference to member diValue3
     * @return Reference to member diValue3
     */
    eProsima_user_DllExport int32_t& diValue3();

    /*!
     * @brief This function sets a value in member diValue4
     * @param _diValue4 New value for member diValue4
     */
    eProsima_user_DllExport void diValue4(
            int32_t _diValue4);

    /*!
     * @brief This function returns the value of member diValue4
     * @return Value of member diValue4
     */
    eProsima_user_DllExport int32_t diValue4() const;

    /*!
     * @brief This function returns a reference to member diValue4
     * @return Reference to member diValue4
     */
    eProsima_user_DllExport int32_t& diValue4();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const dataExchangeDDS& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    int32_t m_endLoopSignal;
    int32_t m_synchronizer;
    int32_t m_diValue2;
    int32_t m_diValue3;
    int32_t m_diValue4;
};

#endif // _DATAEXCHANGEDDS_H_